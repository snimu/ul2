{
  "results": {
    "hellaswag": {
      "alias": "hellaswag",
      "acc,none": 0.4644493128858793,
      "acc_stderr,none": 0.00497715274647859,
      "acc_norm,none": 0.617805218084047,
      "acc_norm_stderr,none": 0.0048493069987278065
    },
    "piqa": {
      "alias": "piqa",
      "acc,none": 0.7529923830250272,
      "acc_stderr,none": 0.010062268140772617,
      "acc_norm,none": 0.7535364526659413,
      "acc_norm_stderr,none": 0.010054810789671817
    },
    "winogrande": {
      "alias": "winogrande",
      "acc,none": 0.6029992107340174,
      "acc_stderr,none": 0.0137510925198067
    }
  },
  "group_subtasks": {
    "hellaswag": [],
    "piqa": [],
    "winogrande": []
  },
  "configs": {
    "hellaswag": {
      "task": "hellaswag",
      "tag": [
        "multiple_choice"
      ],
      "dataset_path": "hellaswag",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "process_docs": "def process_docs(dataset: datasets.Dataset) -> datasets.Dataset:\n    def _process_doc(doc):\n        ctx = doc[\"ctx_a\"] + \" \" + doc[\"ctx_b\"].capitalize()\n        out_doc = {\n            \"query\": preprocess(doc[\"activity_label\"] + \": \" + ctx),\n            \"choices\": [preprocess(ending) for ending in doc[\"endings\"]],\n            \"gold\": int(doc[\"label\"]),\n        }\n        return out_doc\n\n    return dataset.map(_process_doc)\n",
      "doc_to_text": "{{query}}",
      "doc_to_target": "{{label}}",
      "doc_to_choice": "choices",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "version": 1.0
      }
    },
    "piqa": {
      "task": "piqa",
      "dataset_path": "piqa",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "Question: {{goal}}\nAnswer:",
      "doc_to_target": "label",
      "doc_to_choice": "{{[sol1, sol2]}}",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        },
        {
          "metric": "acc_norm",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "goal",
      "metadata": {
        "version": 1.0
      }
    },
    "winogrande": {
      "task": "winogrande",
      "dataset_path": "winogrande",
      "dataset_name": "winogrande_xl",
      "dataset_kwargs": {
        "trust_remote_code": true
      },
      "training_split": "train",
      "validation_split": "validation",
      "doc_to_text": "def doc_to_text(doc):\n    answer_to_num = {\"1\": 0, \"2\": 1}\n    return answer_to_num[doc[\"answer\"]]\n",
      "doc_to_target": "def doc_to_target(doc):\n    idx = doc[\"sentence\"].index(\"_\") + 1\n    return doc[\"sentence\"][idx:].strip()\n",
      "doc_to_choice": "def doc_to_choice(doc):\n    idx = doc[\"sentence\"].index(\"_\")\n    options = [doc[\"option1\"], doc[\"option2\"]]\n    return [doc[\"sentence\"][:idx] + opt for opt in options]\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 5,
      "metric_list": [
        {
          "metric": "acc",
          "aggregation": "mean",
          "higher_is_better": true
        }
      ],
      "output_type": "multiple_choice",
      "repeats": 1,
      "should_decontaminate": true,
      "doc_to_decontamination_query": "sentence",
      "metadata": {
        "version": 1.0
      }
    }
  },
  "versions": {
    "hellaswag": 1.0,
    "piqa": 1.0,
    "winogrande": 1.0
  },
  "n-shot": {
    "hellaswag": 5,
    "piqa": 5,
    "winogrande": 5
  },
  "higher_is_better": {
    "hellaswag": {
      "acc": true,
      "acc_norm": true
    },
    "piqa": {
      "acc": true,
      "acc_norm": true
    },
    "winogrande": {
      "acc": true
    }
  },
  "n-samples": {
    "winogrande": {
      "original": 1267,
      "effective": 1267
    },
    "piqa": {
      "original": 1838,
      "effective": 1838
    },
    "hellaswag": {
      "original": 10042,
      "effective": 10042
    }
  },
  "config": {
    "model": "causal-ul2",
    "model_args": "size=1549,mode=c",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 3456,
    "numpy_seed": 3456,
    "torch_seed": 3456,
    "fewshot_seed": 3456
  },
  "git_hash": "82b4381d",
  "date": 1732275319.0715346,
  "pretty_env_info": "'NoneType' object has no attribute 'splitlines'",
  "transformers_version": "4.46.3",
  "upper_git_hash": null,
  "task_hashes": {
    "winogrande": "70aec4c1e0bacbf56018ee47dffded2c5b772a81c1f737a7688352c678c0f24f",
    "piqa": "f3d75eba376d6e92ae4d3d5f782a40bb0cdcafce4a45ac01149526b20448109b",
    "hellaswag": "c07ac28b12590556a8c9dada74d80021ee7f2c5e58775d82311133d319b389de"
  },
  "model_source": "causal-ul2",
  "model_name": "",
  "model_name_sanitized": "",
  "system_instruction": null,
  "system_instruction_sha": null,
  "fewshot_as_multiturn": false,
  "chat_template": "",
  "chat_template_sha": null,
  "start_time": 180675.961281059,
  "end_time": 186397.2907166,
  "total_evaluation_time_seconds": "5721.3294355410035"
}